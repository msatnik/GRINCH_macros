#include <TSystem.h>
#include <TString.h>
#include "TFile.h"
#include "TTree.h"
#include <TNtuple.h>
#include "TCanvas.h"
#include <iostream>
#include <fstream>
#include "TMath.h"
#include "TH1F.h"
#include <TH2.h>
#include <TStyle.h>
#include <TGraph.h>
#include <TROOT.h>
#include <TMath.h>
#include <TLegend.h>
#include <TPaveLabel.h>
#include <TProfile.h>
#include <TPolyLine.h>
#include <TObjArray.h>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <math.h>
#include <TRandom3.h>
#include <TMatrixD.h>
#include <TVectorD.h>
#include <TDecompSVD.h>

#include "TGLHistPainter.h"
#include "TGLBoxPainter.h"
#include <stdlib.h>

#include <string>
#include "TH1.h"
#include "TRandom.h"
#include <vector>
#include <TGClient.h>
#include <TF1.h>
#include <TGButton.h>
#include <TGFrame.h>
#include <TRootEmbeddedCanvas.h>
#include <RQ_OBJECT.h>
#include <stack>



//using namespace std;



const Int_t maxTracks =1000;

TString inputroot;
TFile *file;
TTree *eventtree;
int N_evts;

const int N_ROW = 60;

//TTree *eventtree;

//int Event=-1;
int Event;
Int_t event_cnt = 0;


//UTEventMin *event;
const Int_t maxHitsPerEvent = 100;
double* ped=NULL;
int* Hit_Events=NULL;
TCanvas* c;
TCanvas* c_heat;
TCanvas* c2;
TCanvas* allC;
TCanvas* cADC;
TCanvas* allC_heat;

//int N_evts;

int eventID;

const int N_PMT=512;

const Int_t FORWARD = 1;
const Int_t BACKWARD = 2;

Int_t hit_flag_array[510];
const Int_t WAS_HIT = 1;
const Int_t NOT_HIT = 0;

//Array to count hits on each tube for entire run.
double TubeHits[N_PMT];
double multiTubeHits[N_PMT];
//Array to count hits on each tube for individual events.
double EvtTubeHits[N_PMT] = {};


// SBS-Offline variables
Int_t ntdc=510;
Double_t grinch_tdc_pmt[1000];
Double_t grinch_tdc_le[1000];
Double_t grinch_tdc_te[1000];
Double_t grinch_tdc_tot[1000];
Double_t grinch_tdc_mult[1000];

Double_t grinch_pmt_row[1000];
Double_t grinch_pmt_col[1000];

Double_t ps_e; 
Double_t sh_e; 
Double_t ntrack; 
Double_t pmom; 

Int_t GrinchADCNum;
Double_t adcGID[1000]; // raw adc
Double_t adcGAtime[1000]; // raw adc
Double_t adcGAmp[1000]; // raw adc
Double_t grinch_adc[1000];//maria
Double_t adcGMult[1000]; // raw adc 

Double_t tr_x[10];
Double_t tr_y[10];
Double_t tr_n;
Double_t tr_vz[100];
Double_t tr_tg_th[100];
Double_t tr_tg_ph[100];
Double_t gem_track_nhits;
Double_t tr_p[100];
Double_t hcal_e;



// Declare parameters
  // HCAL params
  Double_t HCAL_e;
  // BBCAL params 
  Double_t BBps_e, BBsh_e;
  // Track params 
  Double_t BBtr_x[maxTracks], BBtr_y[maxTracks],  BBtr_p[maxTracks], BBtr_th[maxTracks], BBtr_ph[maxTracks];
  Double_t BBtr_n;
  // Hodoscope
  Double_t HODOtmean[1000];
  // Physics
  Double_t kineW2;
  // GRINCH (only track matched I think)
  Double_t BBgr_allclus_tmean[1000], BBgr_allclus_adc[1000], BBgr_allclus_size[1000], BBgr_allclus_trms[1000], BBgr_allclus_tot_mean[1000], BBgr_allclus_trackindex[1000], BBgr_allclus_xmean[1000], BBgr_allclus_ymean[1000]; 
  Double_t BBgr_clus_tmean, BBgr_clus_adc, BBgr_clus_size, BBgr_clus_trms, BBgr_clus_tot_mean, BBgr_clus_trackindex, BBgr_clus_xmean, BBgr_clus_ymean; 
  Double_t BBgr_hit_amp[1000], BBgr_hit_clustindex[1000], BBgr_hit_col[1000], BBgr_hit_row[1000], BBgr_hit_pmtnum[1000], BBgr_hit_trackindex[1000], BBgr_hit_xhit[1000], BBgr_hit_yhit[1000], BBgr_hit_time[1000];
  Int_t hitsGR; 

  Int_t Ndata_BBgr_tdcelemID;
  Double_t  BBgr_tdc_tdcelemID[1000], BBgr_tdc_tdc[1000],BBgr_tdc_te[1000], BBgr_tdc_mult[1000], BBgr_tdc_tot[1000];


 Double_t BBgr_clus_mirrorindex;
 Double_t BBgr_allclus_mirrorindex[1000];

  Double_t bb_tdctrig_tdc[1000], bb_tdctrig_tdcelemID[1000];
  Int_t Nclusters; 
  Int_t Ndata_bb_tdctrig_tdcelemID;


// Histograms
TH1F *h_ntdc = new TH1F("h_ntdc"," ; Nhit ; Counts",512,0,511); // 
TH2F *h_tdc_vs_pmt = new TH2F("h_tdc_vs_pmt"," ; PMT # ; TDC LE", 512,0,511,150,1,150);
TH2F *h_adc_vs_chan = new TH2F("h_adc_vs_chan"," ; chan # ; ADC counts", 64,0,63,200,1,200);
TH2F *GRINCH_mult_vs_pmt = new TH2F("GRINCH_mult_vs_pmt"," ; PMT # ; PMT hit multiplicity", 510,0,510,5,1,6);
TH1F *h_GRINCH_mult = new TH1F("h_GRINCH_mult","; multiplicity ; counts",510,0,510);

TH2F* h_grinch_cluster_le_elem = new TH2F("h_grinch_cluster_le_elem"," ; GRINCH TDC elemID ; GRINCH TDC LE (ns) ",510,0,510,100,850,950);
TH2F* h_grinch_cluster_te_elem = new TH2F("h_grinch_cluster_te_elem"," ; GRINCH TDC elemID ; GRINCH TDC TE (ns)",510,0,510,100,850,950);
TH2F* h_grinch_cluster_tot_elem = new TH2F("h_grinch_cluster_tot_elem"," ; GRINCH TDC elemID ; GRINCH TDC TOT (ns) ",510,0,510,110,-10,100);
TH2F* h_grinch_cluster_mult_elem = new TH2F("h_grinch_cluster_mult_elem"," ; GRINCH TDC elemID ; GRINCH TDC Mult ",510,0,510,15,0,15);
TH2F* h_grinch_cluster_adcMult_elem = new TH2F("h_grinch_cluster_adcMult_elem"," ; GRINCH ADC elem id ; GRINCH ADC Mult. ",63,0,63,10,0,10);
TH2F* h_grinch_cluster_atime_elem = new TH2F("h_grinch_cluster_atime_elem"," ; GRINCH ADC elemID ; GRINCH ADC time (ns) ",63,0,63,500,0,2000);
TH2F* h_grinch_cluster_amp_elem = new TH2F("h_grinch_cluster_amp_elem"," ; GRINCH ADC elem id ; GRINCH ADC amp (mV) ",63,0,63,200,0,200);    
TH2F* h_grinch_cluster_int_elem = new TH2F("h_grinch_cluster_int_elem","; GRINCH ADC elemID ; GRINCH ADC channel ",64,0,63,200,0,200);

TH2F* h_grinch_cluster_adc_tdc =new TH2F("h_grinch_cluster_adc_tdc","; GRINCH ADC AMP ; GRINCH TDC ToT ",64,0,63,110,-10,100);


 TH1D* h_BBgr_hit_amp =  new TH1D("h_BBgr_hit_amp", ";bb.grinch_tdc.hit.amp;",50,0,50);
 TH1D* h_BBgr_hit_time =  new TH1D("h_BBgr_hit_time", ";bb.grinch_tdc.hit.time -bb.hodotdc.clus.tmean[0] ;",60,-30,30);
  TH2D  *h_BBgr_hit_time_elemID = new TH2D("h_BBgr_hit_time_elemID", "LE vs PMT for each PMT; PMT number; LE - hodo_tmean", 510,0,510, 60,-30,30 );
TH2D  *h_BBgr_hit_amp_elemID = new TH2D("h_BBgr_hit_amp_elemID", "LE vs PMT for each PMT; PMT number; LE - hodo_tmean", 510,0,510, 50,0,50 );


Int_t i,j;
double cut = 2000;
double MaxHits = 100;

Int_t next_evt=0;
Int_t usr_evt=0;

Int_t tdc_event[N_PMT][10];
Int_t tdcTimeArray[N_PMT];
//Double_t tdcTime[N_PMT];
double tdcTime=0;
Int_t sum_array[510];
Int_t root_index_array[510];
Int_t adc_root_index_array[510];

Int_t row_array[510];
Int_t col_array[510];
Int_t tdc_to_adc_map_array[510]; // Needs to be updated when ADCs are moved to different Nino cards. 



TPaveLabel** Signal_Label=new TPaveLabel*[N_PMT];
TEllipse** PMT=new TEllipse*[N_PMT];
TPaveLabel** PMT_Label=new TPaveLabel*[N_PMT];
Int_t eventEntries;

Color_t hit_color[10]={kRed, kPink+1, kMagenta, kViolet+7, kBlue, kAzure-4, kCyan, kTeal+3, kGreen, kYellow};
//Color_t hit_color_excess = kBlack;

TControlBar* bar = new TControlBar("","");



stack <Int_t> short_row_on_left_search;
stack <Int_t> short_row_on_right_search;
stack <Int_t> long_row_on_left_search;
stack <Int_t> long_row_on_right_search;
stack <Int_t> middle_search;
stack <Int_t> top_row_middle_search;
stack <Int_t> top_row_left_search;
stack <Int_t> top_row_right_search;
stack <Int_t> bottom_row_middle_search;
stack <Int_t> bottom_row_left_search;
stack <Int_t> bottom_row_right_search;
stack <Int_t> cluster_members_stack;

//function headers
void make_row_col_array();
void Fill_Search_Stacks();
void Print_Stack(stack <Int_t> inputstack);
void set_color_env();
void draw_event_display();
void fill_event(Int_t Direction);
//Int_t Sum_Adjacent_Hits(Int_t row, Int_t col, Int_t PMT);
Int_t Sum_Adjacent_Hits(Int_t PMT,stack <Int_t>& neighbors_stack);
Bool_t Is_NOT_In_Stack(stack <Int_t> checkstack, Int_t PMT);
void show(int option=0);
stack <Int_t> Clear_Stack();
stack <Int_t> Add_to_Stack(stack <Int_t> inputstack, Int_t PMT);
void Calculate_PMT_Coord(double& horiz, double& vert, Int_t PMT);
void Calculate_Cluster_Center(stack <Int_t> inputstack, double& horiz, double& vert);
void Test_Reference(double& a, double& b, Int_t test);
void Find_Cluster_Extrema(stack <Int_t> inputstack, Int_t& horizspread, Int_t& vertspread);
void Make_Histos_for_the_Cluster(stack <Int_t> inputstack);
void make_tdc_to_adc_map_array();
Int_t Stack_Size(stack <Int_t> inputstack);

TChain *C = new TChain("T");
Long64_t Nevents =0;


void GRINCH_eventDisplay_clusters(Int_t entries_input = -1, Int_t kine = 8)//main
{
  gStyle->SetNumberContours(255);   
  Double_t HCal_d = 14.5; // Distance to HCal from scattering chamber for comm1
  Double_t HCal_th = 35.0; // Angle that the center of HCal is at  
  Double_t W2_mean = 0.93; // Mean of W at current kinematic
  Double_t W2_sig = 0.039; // Width of W at current kinematic
  Double_t GR_cut = 30; //GRINCH ToT sum cutoff 
  Double_t PS_cut = 0.2; //PS energy cutoff

  cout<<"kine: "<<kine<<endl;

  string configfilename = Form("config/sbs%d.cfg",kine);

   // cout<<"testing reading in from a config file"<<endl;

  ifstream configfile(configfilename);
  TString currentline;
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("endlist") ){
    if( !currentline.BeginsWith("#") ){
      if(!currentline) cout << "WARNING: No file exists at " << currentline << "." << endl;
      C->Add(currentline);
      cout << "Loaded file at: " << currentline << endl;
    }    
  }
  TCut globalcut = "";
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("endcut") ){
    if( !currentline.BeginsWith("#") ){
      globalcut += currentline;
    }    
    cout<< "Global Cut: "<<globalcut<<endl;
  }
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("#") ){
    TObjArray *tokens = currentline.Tokenize(" ");
    Int_t ntokens = tokens->GetEntries();
    if( ntokens>1 ){
      TString skey = ( (TObjString*)(*tokens)[0] )->GetString();
      if( skey == "HCal_d" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	HCal_d = sval.Atof();
	cout << "Loading HCal distance: " << HCal_d << endl;
      }
      if( skey == "HCal_th" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	HCal_th = sval.Atof();	
	cout << "Loading HCal angle: " << HCal_th << endl;
      }
      if( skey == "W2_mean" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        W2_mean = sval.Atof();
	cout << "Loading W2 mean cut: " << W2_mean << endl;
      }
      if( skey == "W2_sig" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        W2_sig = sval.Atof();
	cout << "Loading W2 sigma cut: " << W2_sig << endl;
      }
      if( skey == "GR_cut" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        GR_cut = sval.Atof();
	cout << "Loading Grinch ToT cut: " << GR_cut << endl;
      }
      if( skey == "PS_cut" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        PS_cut = sval.Atof();
	cout << "Loading Preshower e cut: " << PS_cut << endl;
      }
    }
    delete tokens;
  }


  // Declare root tree variables and set values to memory locations in root file
  // Turn off all branches
  C->SetBranchStatus( "*", 0 );
  // Turn on specifc branches
  C->SetBranchStatus( "sbs.hcal.e", 1 );
  C->SetBranchStatus( "bb.tr.n", 1 );
  C->SetBranchStatus( "bb.tr.x", 1 );
  C->SetBranchStatus( "bb.tr.y", 1 );
  C->SetBranchStatus( "bb.tr.p", 1 );
  C->SetBranchStatus( "bb.tr.th", 1 );
  C->SetBranchStatus( "bb.tr.ph", 1 );
  C->SetBranchStatus( "bb.ps.e", 1 );
  C->SetBranchStatus( "bb.sh.e", 1 );
  C->SetBranchStatus( "bb.hodotdc.clus.tmean", 1 );
  C->SetBranchStatus("bb.tdctrig.tdc",1);
  C->SetBranchStatus("bb.tdctrig.tdcelemID",1);
  C->SetBranchStatus("Ndata.bb.tdctrig.tdcelemID",1);
  C->SetBranchStatus( "e.kine.W2", 1 );
  C->SetBranchStatus("Ndata.bb.grinch_tdc.allclus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.size",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.t_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.t_rms",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.tot_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.trackindex",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.x_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.y_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.mirrorindex",1);

  // track-matched cluster variables
  C->SetBranchStatus("bb.grinch_tdc.clus.adc",1); // TDC LE sum 
  C->SetBranchStatus("bb.grinch_tdc.clus.size",1); // number of PMTs in the cluster
  C->SetBranchStatus("bb.grinch_tdc.clus.t_mean",1); // average LE time pf the PMTs
  C->SetBranchStatus("bb.grinch_tdc.clus.t_rms",1); // RMS of the average LE time. 
  C->SetBranchStatus("bb.grinch_tdc.clus.tot_mean",1); // mean of the time-over-threshold
  C->SetBranchStatus("bb.grinch_tdc.clus.trackindex",1);// which track the cluster matches (-1 if none)
  C->SetBranchStatus("bb.grinch_tdc.clus.x_mean",1); // the mean x position of the PMTs in the cluster
  C->SetBranchStatus("bb.grinch_tdc.clus.y_mean",1); //  the mean y position of the PMTs in the cluster
  C->SetBranchStatus("bb.grinch_tdc.clus.mirrorindex",1); // which mirror it was matched to  

  C->SetBranchStatus("bb.grinch_tdc.hit.amp",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.clustindex",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.col",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.row",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.pmtnum",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.time",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.trackindex",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.xhit",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.yhit",1);
  C->SetBranchStatus("Ndata.bb.grinch_tdc.hit.pmtnum",1);

  // Map branches to the variables 
  C->SetBranchAddress( "sbs.hcal.e", &HCAL_e );
  C->SetBranchAddress( "bb.tr.n", &BBtr_n );
  C->SetBranchAddress( "bb.tr.x", &BBtr_x );
  C->SetBranchAddress( "bb.tr.y", &BBtr_y );
  C->SetBranchAddress( "bb.tr.p", &BBtr_p );
  C->SetBranchAddress( "bb.tr.th", &BBtr_th );
  C->SetBranchAddress( "bb.tr.ph", &BBtr_ph );
  C->SetBranchAddress( "bb.ps.e", &BBps_e );
  C->SetBranchAddress( "bb.sh.e", &BBsh_e );
  C->SetBranchAddress( "bb.hodotdc.clus.tmean", &HODOtmean );
  C->SetBranchAddress("bb.tdctrig.tdc",&bb_tdctrig_tdc);
  C->SetBranchAddress("bb.tdctrig.tdcelemID",&bb_tdctrig_tdcelemID);
  C->SetBranchAddress("Ndata.bb.tdctrig.tdcelemID",&Ndata_bb_tdctrig_tdcelemID);
  C->SetBranchAddress( "e.kine.W2", &kineW2 );

  C->SetBranchAddress("Ndata.bb.grinch_tdc.allclus.adc",&Nclusters);
  C->SetBranchAddress("bb.grinch_tdc.allclus.adc",&BBgr_allclus_adc);
  C->SetBranchAddress("bb.grinch_tdc.allclus.size",&BBgr_allclus_size);
  C->SetBranchAddress("bb.grinch_tdc.allclus.t_mean",&BBgr_allclus_tmean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.t_rms",&BBgr_allclus_trms);
  C->SetBranchAddress("bb.grinch_tdc.allclus.tot_mean",&BBgr_allclus_tot_mean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.trackindex",&BBgr_allclus_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.allclus.x_mean",&BBgr_allclus_xmean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.y_mean",&BBgr_allclus_ymean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.mirrorindex",&BBgr_allclus_mirrorindex);

  C->SetBranchAddress("bb.grinch_tdc.clus.adc",&BBgr_clus_adc);
  C->SetBranchAddress("bb.grinch_tdc.clus.size",&BBgr_clus_size);
  C->SetBranchAddress("bb.grinch_tdc.clus.t_mean",&BBgr_clus_tmean);
  C->SetBranchAddress("bb.grinch_tdc.clus.t_rms",&BBgr_clus_trms);
  C->SetBranchAddress("bb.grinch_tdc.clus.tot_mean",&BBgr_clus_tot_mean);
  C->SetBranchAddress("bb.grinch_tdc.clus.trackindex",&BBgr_clus_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.clus.x_mean",&BBgr_clus_xmean);
  C->SetBranchAddress("bb.grinch_tdc.clus.y_mean",&BBgr_clus_ymean);
  C->SetBranchAddress("bb.grinch_tdc.clus.mirrorindex",&BBgr_clus_mirrorindex);

  C->SetBranchAddress("bb.grinch_tdc.hit.amp",&BBgr_hit_amp);
  C->SetBranchAddress("bb.grinch_tdc.hit.clustindex",&BBgr_hit_clustindex);
  C->SetBranchAddress("bb.grinch_tdc.hit.col",&BBgr_hit_col);
  C->SetBranchAddress("bb.grinch_tdc.hit.row",&BBgr_hit_row);
  C->SetBranchAddress("bb.grinch_tdc.hit.pmtnum",&BBgr_hit_pmtnum);
  C->SetBranchAddress("bb.grinch_tdc.hit.time",&BBgr_hit_time);
  C->SetBranchAddress("bb.grinch_tdc.hit.trackindex",&BBgr_hit_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.hit.xhit",&BBgr_hit_xhit);
  C->SetBranchAddress("bb.grinch_tdc.hit.yhit",&BBgr_hit_yhit);
  C->SetBranchAddress("Ndata.bb.grinch_tdc.hit.pmtnum",&hitsGR);

  
  
  // Set long int to keep track of total entries
  cout<<"Loading branches. Hold tight! "<<endl;
  Nevents = C->GetEntries();
 
  cout<<"Entries: "<<Nevents<<endl;
 

  

  //Create GUI
  bar = new TControlBar("vertical", "GRINCH Event Display");
  bar->AddButton("GRINCH Event Display", "");
  bar->AddButton("", "");
  bar->AddButton("First Event", "show(-2)");
  bar->AddButton("Next Event", "show(1)");
  bar->AddButton("Prev. Event", "show(6)");
  bar->AddButton("Last Event", "show(-3)");
  bar->AddButton("", "");
  bar->AddButton("Choose Event #", "show(0)");
  bar->AddButton("", "");
  //bar->AddButton("Heat Map", "show(4)");
  //bar->AddButton("PMT Counter", "show(5)");
  bar->AddButton("", "");
  bar->AddButton("Exit",".q");
  bar->Show();

}// end main



void fill_event(Int_t Direction)
{  
 
  if ( allC != NULL)
    {
      allC->Clear();
    }
  else
    {
      allC=new TCanvas("allC","Multiplicity vs. PMT",1000,800);
    }

  //allC -> SetCanvasSize(700, 400);
  //allC -> SetWindowSize(700, 450);

  allC -> Divide(2,2);

  if( cADC != NULL)
    {
      cADC ->Clear();
    }
  else
    {
      cADC = new TCanvas("cADC","cADC",1000,800);
    }

  cADC ->Divide(2,2);

  if ( c != NULL)
    {
      c->Clear();
    }
  else
    {
      c=new TCanvas("c");
    }

   c -> Range(0,0,1.5, 1.8);// This changes the range of the canvas
   c -> SetCanvasSize(875,875);
  // c -> SetWindowSize(400, 2500);

  if( c2 )
    {
      c->cd();
    }


  // draw_event_display();

  Int_t hit_row_array[510];
  Int_t hit_col_array[510];
   
   
  const Int_t nChanADC = 64;
  const Int_t nChanVETROC = 510;

  //const Int_t TDC_array = 1000;
  const Int_t TDC_array = 10;


  Bool_t eventflag = kFALSE; 
  Bool_t clusterflag= kFALSE;

  stack <Int_t> clusterstack;
  stack <Int_t> emptystack;

  Bool_t sh_energy_flag = kFALSE;
 
  stack <Int_t> cluster_stack;
  stack <Int_t> neighbors_stack;

  draw_event_display();

  eventflag = kFALSE;
  // while(!eventflag){

    C->GetEntry(event_cnt);
    cout<<"event_cnt "<<event_cnt<<endl;

    h_BBgr_hit_time ->Reset();
    h_BBgr_hit_amp ->Reset();
    h_BBgr_hit_time_elemID ->Reset();

    for (Int_t i = 0; i < hitsGR ; i++){
      Int_t pmtnum = BBgr_hit_pmtnum[i];
      if (pmtnum >=510) continue;
      eventflag= kTRUE;
      Double_t time_hodocor = BBgr_hit_time[i]  - HODOtmean[0];
      h_BBgr_hit_amp ->Fill(BBgr_hit_amp[i]);
      h_BBgr_hit_time_elemID ->Fill(pmtnum, time_hodocor);
      h_BBgr_hit_amp_elemID ->Fill(pmtnum ,BBgr_hit_amp[i]);

      Signal_Label[pmtnum]->SetTextColor(kRed);
      PMT[pmtnum]->SetFillColor(kRed);
      PMT_Label[pmtnum]->SetFillColor(kRed);

    }// end loop over hitsGR



    // if(!eventflag){ // check to see if we found a hit in the detector for this event
    //   if(Direction == FORWARD && event_cnt < (eventEntries -1)){
    // 	event_cnt ++;
    //   } 
    //   else if(Direction == BACKWARD && event_cnt > 0){
    // 	event_cnt --;
    //   }
    //   else {
    // 	cout<<"You have asked to go out bounds. Breaking loop."<<endl;
    // 	eventflag = kTRUE;//break out of the while loop. 
    //   }
    //   //cout<<"No signals within cuts found for this event. Going to next event."<<endl;
    // }
    //}// end while loop 
  


    


  // while (!clusterflag){
  //   eventflag=kFALSE;

  //   while (!eventflag){
  //     cout<<"event  = "<<event_cnt<<endl;

  //     C->GetEntry(event_cnt);

  //     Double_t tot_e = ps_e+sh_e;
  //     Double_t rat = tot_e/pmom;

  //     sh_energy_flag = kFALSE;
  //     // if(abs(tot_e - 3)< 0.5 && ps_e > 0.2 && abs(rat - 1.2) < 0.2 )
  //     if(tr_n ==1 && abs(tr_vz[0])<0.08 && gem_track_nhits > 3 && tr_p[0] >1.4 && tr_p[0]<2.0 && hcal_e > 0.025 && ps_e >0.22)//SBS9
  // 	{
  // 	  sh_energy_flag = kTRUE;
	
    
      
  // 	  for (int n=0; n<64; n++)
  // 	    {
  // 	      adc_root_index_array[n]=0;
  // 	    }


  // 	  for(int r=0; r<N_PMT; r++)  //Reset individual events tube hits counter for each event.
  // 	    {
  // 	      EvtTubeHits[r] = 0;
  // 	      tdcTimeArray[r] = 0;
  // 	      hit_flag_array[r]=0;
  // 	      hit_row_array[r]= -1;
  // 	      hit_col_array[r] = -1;
  // 	      root_index_array[r]=0;
  // 	    }
   
  // 	  GRINCH_mult_vs_pmt -> Reset();
  // 	  h_grinch_cluster_le_elem -> Reset();
  // 	  h_grinch_cluster_te_elem -> Reset();
  // 	  h_grinch_cluster_tot_elem -> Reset();
  // 	  h_grinch_cluster_mult_elem -> Reset();
  // 	  h_grinch_cluster_adcMult_elem -> Reset();
  // 	  h_grinch_cluster_atime_elem -> Reset();
  // 	  h_grinch_cluster_amp_elem -> Reset();
  // 	  h_grinch_cluster_int_elem -> Reset();
  // 	  h_grinch_cluster_adc_tdc ->Reset();
      
      
  // 	  // I want to add ADC info to look at the clusters. 
  // 	  for(Int_t ig=0; ig<GrinchADCNum; ig++)
  // 	    {
  // 	      Int_t gindex_adc = adcGID[ig];
  // 	      adc_root_index_array[gindex_adc] = ig;
  // 	    }
      
 
  // 	  for(int j=0; j<nChanVETROC; j++)
  // 	    {       
  // 	      Double_t temp_mult=0;
  // 	      Int_t temp_hit_flag=0;//was it hit or not
  // 	      Int_t temp_row = -1;
  // 	      Int_t temp_col = -1;
	  
	
  // 	      for (Int_t ig=0;ig<ntdc;ig++) {
  // 		if (grinch_tdc_pmt[ig] == j && abs(grinch_tdc_le[ig]-900) < 20)
  // 		  {
  // 		    temp_mult=grinch_tdc_mult[ig];
  // 		    temp_hit_flag = 1;
  // 		    temp_row = grinch_pmt_row[ig];
  // 		    temp_col = grinch_pmt_col[ig];
  // 		    root_index_array[j] = ig; // Map the "gindex" (which is the PMT number) to the "ig index" which is what the branch needs.
  // 		    // I want to be able to go back after finding clusters to look at ADC and TDC and whatnot on those PMTs.
  // 		    // cout<<"temp_row= "<<temp_row <<", temp_col= "<<temp_col<<" for PMT "<< j <<endl;

  // 		  }
  // 	      }
	    
  // 	      h_GRINCH_mult->SetBinContent(j,temp_mult);
  // 	      GRINCH_mult_vs_pmt->Fill( j , temp_mult );
	
  // 	      tdcTimeArray[j] = temp_mult;
  // 	      hit_flag_array[j] = temp_hit_flag;
  // 	      hit_row_array[j] = temp_row;
  // 	      hit_col_array[j] = temp_col;

  // 	      if(tdcTimeArray[j] > 0)
  // 		{
  // 		  EvtTubeHits[j] = EvtTubeHits[j] + 1;
  // 		  if(tdcTimeArray[j] <=10)
  // 		    {
  // 		      eventflag = kTRUE;
  // 		    }
  // 		}	  	
  // 	    }
  // 	}
  //     if(!eventflag){ // check to see if we found a hit in the detector for this event
  // 	if(Direction == FORWARD && event_cnt < (eventEntries -1)){
  // 	  event_cnt ++;
  // 	} 
  // 	else if(Direction == BACKWARD && event_cnt > 0){
  // 	  event_cnt --;
  // 	}
  // 	else {
  // 	  cout<<"You have asked to go out bounds. Breaking loop."<<endl;
  // 	  eventflag = kTRUE;//break out of the while loop. 
  // 	}
  // 	//cout<<"No signals within cuts found for this event. Going to next event."<<endl;
  //     }
   
  //   }//end of event while loop
    
  //   // The event we are on now has a hit in at least 1 PMT 
    

  //   //cout<<"EVENT # = "<<event_cnt<<endl;
   
  //   for(int m = 0; m<510;m++) //fill with 0 
  //     {
  // 	sum_array[m]=0;
  //     }
  //   Int_t row=-1;
  //   Int_t col=-1;
  //   clusterstack = Clear_Stack(); // clear the stack 
    
  //   //clusterflag = kFALSE;
  //   //// Look for clusters
  //   Int_t top;
    
  //   cluster_stack = Clear_Stack();
  //   for (int pmtcntr = 9; pmtcntr<=500 ; pmtcntr++)
  //     {
  // 	row = hit_row_array[pmtcntr];
  // 	col = hit_col_array[pmtcntr];
  // 	neighbors_stack = Clear_Stack();
  // 	//sum_array[pmtcntr] =  Sum_Adjacent_Hits(row,col,pmtcntr);
  // 	sum_array[pmtcntr] =  Sum_Adjacent_Hits(pmtcntr, neighbors_stack);
  // 	if (sum_array[pmtcntr] != 0)
  // 	  {
  // 	    //cout<<"sum_array [PMT] "<<pmtcntr<< " = "<<sum_array[pmtcntr]<<endl;
  // 	  }
  // 	if (sum_array[pmtcntr] >= 2)
  // 	  {
  // 	    //cout<< "Possible cluster around PMT "<<  pmtcntr << ": sum = " <<sum_array[pmtcntr]<<endl;
  // 	    clusterflag = kTRUE;
  // 	    clusterstack.push(pmtcntr); // put that PMT in the stack for the cluster size to be counted 
  // 	    //Print_Stack(neighbors_stack);
  // 	    //cout<<"neighbors stack test"<<endl;
  // 	    while(!neighbors_stack.empty())
  // 	      {
  // 		top = neighbors_stack.top();
  // 		if( Is_NOT_In_Stack(cluster_stack,top))
  // 		  {
  // 		    cluster_stack.push(top);
  // 		  }
  // 		neighbors_stack.pop();		
  // 	      }
  // 	  }
  //     }
     
    
    
  //   if(!clusterflag){
  //     if(Direction == FORWARD && event_cnt < (eventEntries -1)){
  // 	event_cnt ++;
  //     } 
  //     else if(Direction == BACKWARD && event_cnt > 0){
  // 	event_cnt --;
  //     }
  //     else {
  // 	cout<<"You have asked to go out bounds. Breaking loop."<<endl;
  // 	clusterflag = kTRUE;//break out of the while loop. 
  //     }
  //     // cout<<"No clusters within cuts found for this event. Going to next event."<<endl;
  //   }
  
  // }//end of cluster while loop

 

  // Print_Stack(cluster_stack); 
  // cout<<"cluster_stack"<<endl;
  
  // Int_t cluster_size =  Stack_Size(cluster_stack);

  // cout<<"stack size = "<< cluster_size <<endl;
 


 
  // //want to send cluster_members_stack to a function that makes histos of ADC/TDC for each PMT in the cluster. 
  // Make_Histos_for_the_Cluster(cluster_stack);

  // if(sh_energy_flag)
  //   {
  //     cout << "event had good shower energy"<<endl;
  //   }
  // else if (!sh_energy_flag)
  //   {
  //     cout << "event did not have good shower energy"<<endl;
  //   }


  // stack <Int_t> copystack = cluster_stack;
  // Int_t pmttest=0;
  // double x=0;
  // double y=0;
  // Int_t test = 0;
  // double clusterx = 0;
  // double clustery = 0;
   
  
  
  // Calculate_Cluster_Center(cluster_stack,clusterx,clustery);
  // cout<<"cluster center is at "<<clusterx<<", "<<clustery<<endl;
  
  // Int_t vertspread = 0;
  // Int_t horizspread = 0; 

  // Find_Cluster_Extrema(cluster_stack,horizspread,vertspread);
  // cout<<"cluster is "<<horizspread<<" wide, "<< vertspread<<" tall"<<endl;

  // cout<< "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX " <<endl;
  
  // draw_event_display();

  // for (Int_t j = 0; j<510 ; j++)//filling display with appropriate colors
  //   {
  //     if(tdcTimeArray[j] > 0)	 
  // 	{
  // 	  Int_t d = j;
  // 	  Int_t color_shift = tdcTimeArray[d]-1;


  // 	  //      cout<<"PMT: "<<d<<" value: "<<tdcTime<<endl;
	     
  // 	  Signal_Label[d]->SetFillColor(hit_color[color_shift]);

  // 	  if(tdcTimeArray[j]<=10)
  // 	    {
  // 	      Signal_Label[d]->SetTextColor(kBlack);
  // 	      PMT[d]->SetFillColor(hit_color[color_shift]);
  // 	      PMT_Label[d]->SetFillColor(hit_color[color_shift]);
  // 	      // if (j>9 && j<500 &&  sum_array[j]>=2)
  // 	      // 	{
  // 	      // 	  PMT_Label[d]->SetFillColor(kWhite);
  // 	      // 	}

  // 	    }else{
  // 	    Signal_Label[d]->SetTextColor(kRed);
  // 	    PMT[d]->SetFillColor(kBlack);
  // 	    PMT_Label[d]->SetFillColor(kRed);
  // 	  }

  // 	  // Signal_Label[d]->SetTextSize(2);
  // 	  // // cout<<"Multiplicity = "<<tdcTimeArray[d]<<" in PMT = "<<d<<endl;
  // 	  // Signal_Label[d]->SetLabel(Form("%i",tdcTimeArray[d]));
  // 	  // Signal_Label[d]->Draw("same");

  // 	}
  //   }
  
  

  allC->cd(1);
  //style(0);
  gStyle->SetOptStat(0);
  gStyle->SetPalette(1,0); 
  h_BBgr_hit_time_elemID ->Draw("COLZ"); 
  allC->cd(2);
  h_BBgr_hit_amp_elemID ->Draw("COLZ");
  // allC->cd(3);
  // h_grinch_cluster_tot_elem ->Draw("COLZ");
  //allC->cd(4);
  // h_grinch_cluster_mult_elem ->Draw("COLZ");

  c->SetTitle(Form("Event %d",event_cnt));
  allC->SetTitle(Form("Event %d",event_cnt));

  // cADC ->cd(1);
  // h_grinch_cluster_amp_elem -> Draw("COLZ");
  // cADC ->cd(2);
  // h_grinch_cluster_int_elem -> Draw("COLZ");
  // cADC ->cd(3);
  // //h_grinch_cluster_atime_elem ->Draw("COLZ");
  // h_grinch_cluster_adc_tdc ->Draw("COLZ");
  // cADC ->cd(4);
  // h_grinch_cluster_adcMult_elem ->Draw("COLZ");

  c->Modified(); c->Update(); gSystem->ProcessEvents();
  allC->Modified(); allC->Update(); gSystem->ProcessEvents();
  // cADC->Modified(); cADC->Update(); gSystem->ProcessEvents();
  //allC2->Modified(); allC2->Update(); gSystem->ProcessEvents();
  //allC3->Modified(); allC3->Update(); gSystem->ProcessEvents();

  //c->SetTitle(Form("Event %d",Event));
  //allC->SetTitle(Form("Event %d",Event));

} // END FILL EVENT



void set_color_env(){
  //Create a nice color gradient.
  const Int_t NRGBs = 5;
  const Int_t NCont = 255;

  Double_t stops[NRGBs] = { 0.00, 0.34, 0.61, 0.84, 1.00 };
  Double_t red[NRGBs]   = { 0.00, 0.00, 0.87, 1.00, 0.51 };
  Double_t green[NRGBs] = { 0.00, 0.81, 1.00, 0.20, 0.00 };
  Double_t blue[NRGBs]  = { 0.51, 1.00, 0.12, 0.00, 0.00 };
  TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
  gStyle->SetNumberContours(NCont);   //Chooses custom gradient NCont.
}


void draw_event_display()
{
  //*************************************
  //DOUBLE LOOP FOR EVENT DISPLAY CREATION
  ///////////////////////////////////////

  if (c == NULL) c=new TCanvas("c");

  //load_data();

  double PMT_dia=2./(59.0); //the whole canvas has a max size of 1. We divide by the number of rows. 
  double x,y;//center of PMT. Draws PMT array.

  double labelsize=0.2;
  Int_t k=0;

  double y_off = -0.25;

  //cout<<"Creating Event Display..."<<endl;
  for ( i=0; i<N_ROW; i++ )
    {
      int N_COL = 8 + i%2;
      for ( j=0; j<N_COL; j++ )
	{
	  if ( i%2==0 )
	    {
	      x=(j+1.5)*PMT_dia +0.1;
	      y=N_ROW*PMT_dia-(i*sin(60*TMath::DegToRad())+0.5)*PMT_dia + y_off;
	    }
	  else
	    {
	      x=(j+1)*PMT_dia  +0.1;
	      y=N_ROW*PMT_dia-(i*sin(60*TMath::DegToRad())+0.5)*PMT_dia + y_off;
	    }
	  // cout<<"ROW: "<<i<<" PMT: "<<k<<" X: "<<x<<" Y: "<<y<<endl;
	  PMT_Label[k]=new TPaveLabel(x-PMT_dia*labelsize, y-PMT_dia*labelsize, x+PMT_dia*labelsize, y+PMT_dia*labelsize, Form("%d",k));
	  PMT[k]=new TEllipse(x, y, PMT_dia*0.5, PMT_dia*0.5);

	  if ( i==0 && j==0 )
	    PMT[k]->Draw();
	  else
	    PMT[k]->Draw("same");

	  PMT_Label[k]->SetFillColor(0);
	  //PMT_Label[k]->SetBorderSize(1);
	  //PMT_Label[k]->SetTextSize(0.5);
	  PMT_Label[k]->SetTextSize(1);
	  PMT_Label[k]->Draw("same");

	  Signal_Label[k]=new TPaveLabel(x-1.5*PMT_dia*labelsize,y+PMT_dia*labelsize,x+1.5*PMT_dia*labelsize,y+2*PMT_dia*labelsize,"");
	  Signal_Label[k]->SetTextColor(2);
	  Signal_Label[k]->SetFillColor(0);
	  Signal_Label[k]->SetLabel("");
	  k++;
	}
    }//End building event display geometry.
  //cout<<"...Event Display Created"<<endl;
  //*************************************
} // Event Display function



void Make_Histos_for_the_Cluster(stack <Int_t> inputstack)
{
  Int_t PMT;
  Int_t root_id;
  Int_t ADC_chan;
  Int_t ADC_root_id;
  while (!inputstack.empty())
    {
      PMT = inputstack.top();
      inputstack.pop();
      root_id = root_index_array[PMT];//get the index that the branches need in order to look at the specific PMT for this event
      h_grinch_cluster_le_elem -> Fill(PMT,grinch_tdc_le[root_id]);
      h_grinch_cluster_te_elem -> Fill(PMT,grinch_tdc_te[root_id]);
      h_grinch_cluster_tot_elem -> Fill(PMT,grinch_tdc_tot[root_id]);
      h_grinch_cluster_mult_elem -> Fill(PMT,grinch_tdc_mult[root_id]);

      ADC_chan = tdc_to_adc_map_array[PMT];
      if(ADC_chan !=-1)//the PMT has a corresponding ADC channel. 
	{
	  cout<<"hit on PMT "<<PMT<<" with ADC chan "<< ADC_chan<<endl;
	  ADC_root_id = adc_root_index_array[ADC_chan];
	  h_grinch_cluster_atime_elem ->Fill(ADC_chan, adcGAtime[ADC_root_id]);
	  h_grinch_cluster_amp_elem ->Fill(ADC_chan, adcGAmp[ADC_root_id]);
	  h_grinch_cluster_int_elem ->Fill(ADC_chan, grinch_adc[ADC_root_id]);
	  h_grinch_cluster_adcMult_elem ->Fill(ADC_chan,adcGMult[ADC_root_id]); 

	  h_grinch_cluster_adc_tdc ->Fill(adcGAmp[ADC_root_id],grinch_tdc_tot[root_id]); 
	  //cout<<"PMT "<<PMT<<": ADC amp= "<<adcGAmp[ADC_root_id]<<" TDC ToT= "<< grinch_tdc_tot[root_id]<<endl;
	}

    }

  //ADCs? Need to maybe make another array for their id's? 
}



void make_tdc_to_adc_map_array() //get the ADC chan number from the PMT number (if there is one)
{
  //Fill the array so that it is -1 where the PMT index does not have a corresponding TDC channel, and the ADC channel number where it does. 
  for (Int_t i = 0; i<510; i ++)//initialize all to -1
    {           
      tdc_to_adc_map_array[i]= -1;
    }
  
  Int_t ADC_cnt = 0; //ADCs are on PMTs 192 to 255 as of 2/1/2022
  for (Int_t PMT = 192; PMT <= 255; PMT ++)
    {
      tdc_to_adc_map_array[PMT] = ADC_cnt;
      ADC_cnt++;
    } 
}//end make_tdc_to_adc_map_array



// LOAD THE GUI WITH BUTTONS
void show(int option=0)
{

  //cout<<" Option: "<<option<<endl;

  int event;
  int n;
  

  double* adc=new double[N_PMT];
  //  Double_t* tdc=new double[N_PMT][70];
  int* Nadc=new int[N_PMT];
  int* Ntdc=new int[N_PMT];

  
 
  //cout << "TOTAL EVENTS: " << eventEntries << endl;

  //cout << "BEFORE EVENT: " << event_cnt << endl;


  //MENU SELECTION

  if ( option==-2 )   //First Event
    {
      event_cnt = 0;
      fill_event(FORWARD);
    }
  else if ( option==-3 ) //Last Event 
    {
      event_cnt = Nevents - 1;
      fill_event(BACKWARD);
    }
  else if ( option==0 ) //Ask Event
    {
      Printf("Please Enter Event Number:");
      cin>>usr_evt;
      cout<<"usr_evt "<< usr_evt <<endl;
      if(usr_evt >= 0 && usr_evt < (Nevents -1)){    
	event_cnt = usr_evt;
	fill_event(FORWARD);     
      }
      else {cout<<"Invalid event number from user input"<<endl;}
    }

  else if ( option==1 ) //Next Event
    {
      //should add a bounds check
      if (event_cnt < Nevents -1){
	event_cnt++;
	fill_event(FORWARD);
      } else {
	cout<<"You are at the last event in the tree. Can't go farther."<<endl;
      }
    }

  
  else if (option == 6)//Prev event
    {
      if (event_cnt > 0)
	{
	  event_cnt --;
	  fill_event(BACKWARD);	  
	}
      else{
	cout<<"You are at the first entry in the tree. Can't go back farther"<<endl;
      }
     
    }


 
  // cout<<"AFTER EVENT: "<<event_cnt<<endl;

}// END show function
