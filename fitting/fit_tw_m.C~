#include <vector>
#include <iostream>
#include <algorithm>
#include "TCut.h"
#include "TLorentzVector.h"
#include "TVector3.h"
#include "TTreeFormula.h"
#include "TChain.h"
#include "TLatex.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TCanvas.h"
#include "TStopwatch.h"
#include <fstream>
#include <string>
#include "TProfile.h"

// Global Params
Double_t yMin = -7;
Double_t yMax= 10;
Double_t xMin = 8 ;
Double_t xMax= 16;

// Function Declarations 
Double_t poly2(Double_t *x, Double_t *par);
Double_t trad(Double_t *x, Double_t *par);

// MAIN
void fit_tw_m(){ 

  TFile *f1 = TFile::Open("../output/sbs8_aug30.root"); // Load rootfile

  // Set Up Canvas

  // Load Histograms
  TH2D *origHist = (TH2D*)f1->Get("h_BBgr_hit_time_amp");
  
  // Clone Histogram and limit Y range. (Maybe should also limit x range?) 
  // Could maybe use a clone command instead of doing it manually like this 
  TH2D* clonedHist = new TH2D("clonedHist", origHist->GetTitle(),
                                origHist->GetXaxis()->GetNbins(),
                                origHist->GetXaxis()->GetXmin(),
                                origHist->GetXaxis()->GetXmax(),
                                origHist->GetYaxis()->FindBin(yMax) - origHist->GetYaxis()->FindBin(yMin) + 1,
                                yMin, yMax);

 // Loop over the X and Y bins of the original TH2D
    for (int i = 1; i <= origHist->GetXaxis()->GetNbins(); i++) {
        for (int j = origHist->GetYaxis()->FindBin(yMin); j <= origHist->GetYaxis()->FindBin(yMax); j++) {
            double binContent = origHist->GetBinContent(i, j);
            clonedHist->SetBinContent(i, j - origHist->GetYaxis()->FindBin(yMin) + 1, binContent);
        }
    }

 TH2D* clonedHist2 = new TH2D("clonedHist2", origHist->GetTitle(),
                                origHist->GetXaxis()->GetNbins(),
                                origHist->GetXaxis()->GetXmin(),
                                origHist->GetXaxis()->GetXmax(),
                                origHist->GetYaxis()->FindBin(yMax) - origHist->GetYaxis()->FindBin(yMin) + 1,
                                yMin, yMax);

 // Loop over the X and Y bins of the original TH2D
    for (int i = 1; i <= origHist->GetXaxis()->GetNbins(); i++) {
        for (int j = origHist->GetYaxis()->FindBin(yMin); j <= origHist->GetYaxis()->FindBin(yMax); j++) {
            double binContent = origHist->GetBinContent(i, j);
            clonedHist2->SetBinContent(i, j - origHist->GetYaxis()->FindBin(yMin) + 1, binContent);
        }
    }

  //  TH2D *clonedHist = (TH2D*)(origHist->Clone("clonedHist"));
  //  TH2D *clonedHist2 = (TH2D*)(origHist->Clone("clonedHist2"));
   
    TF1 *fit_poly2 = new TF1("fit_poly2", poly2, xMin, xMax, 2);
    fit_poly2 ->SetParameters(4,-0.2);
    TFitResultPtr r = clonedHist ->Fit("fit_poly2", "MQR","",xMin,xMax);
    Int_t fitStatus = r;
    //if (fitStatus !=0) {cout<<"fit error" <<endl;}
    Double_t poly_offset = fit_poly2->GetParameter(0);
    Double_t poly_slope = fit_poly2->GetParameter(1);
    
    cout<<"poly fit: "<<endl;
    cout<< "offset "<<poly_offset<<endl; 
    cout<<"slope "<< poly_slope<<endl;
    cout<<endl; 

    TF1 *fit_trad = new TF1("fit_trad", trad, xMin, xMax, 2);
    fit_trad ->SetParameters(-2,14);
    fit_trad ->SetLineColor(kBlue);
    TFitResultPtr r1 = clonedHist2 ->Fit("fit_trad", "MQR","",xMin,xMax);
    Double_t trad_offset =  fit_trad->GetParameter(0);
    Double_t trad_p1 = fit_trad->GetParameter(1);
    cout<<"traditional fit :"<<endl;
    cout<<"offset " << trad_offset<<endl; 
    cout<< "p1 "<<trad_p1<<endl; 


    TProfile *profile = clonedHist ->ProfileX();
    TCanvas *c1 = new TCanvas("c1","c1",700,500);
    clonedHist->Draw("colz");
    profile ->Draw("same");
    c1->Update();

    TProfile *profile2 = clonedHist2 ->ProfileX();
    TCanvas *c2 =  new TCanvas("c2","c2",700,500);
    clonedHist2 ->Draw("colz");
    //profile2->Draw("same");
    c2 ->Update();

    // TCanvas *c3 =  new TCanvas("c3","c3",700,500);
    // origHist ->Draw("colz");
    // //profile2->Draw("same");
    // c3 ->Update();

    

       
}//end main

//FUNCTIONS

Double_t poly2(Double_t *x, Double_t *par)
{
  Double_t fit =  par[0] + par[1]*x[0];
  return fit;
}

Double_t trad(Double_t *x, Double_t *par)
{
  Double_t fit =  par[0] +  par[1]* pow(x[0],-0.5);
  return fit;
}



