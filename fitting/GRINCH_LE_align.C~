#include <ctime>
#include <iostream>
#include <fstream>
#include <string>
#include <TChain.h>
#include <TSystem.h>
#include "TChain.h"
#include "TTree.h"
#include "TFile.h"
#include "TMatrixD.h"
#include "TVectorD.h"
#include "TObjString.h"
#include "TObjArray.h"
#include "TCut.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TMath.h"
#include "TLegend.h"
#include "TVector3.h"
#include "TGraphErrors.h"
#include "TLorentzVector.h"
#include <TStopwatch.h>

// global params

// function declarations 
Double_t gausFit(Double_t *x, Double_t *par);
TGraphErrors* FitBinsGausTH2D(TH2D* hist, TH1D* sigmahist);

void GRINCH_LE_align(){ // main
  gStyle->SetNumberContours(255);

  // Load rootfiles for histograms
  TFile *f1 = TFile::Open("../output/sbs8.root"); // Load rootfile

  // Load Histograms
  TH2D *hist1 = (TH2D*)f1->Get("h_BBgr_hit_time_elemID_bestcluster");
  // make a clone
   TH2D *clonedHist = (TH2D*)(hist1->Clone("clonedHist"));

  // make histogram for sigmas 
  TH1D* sigmahist =  new TH1D("sigmahist",";sigma from gaussian fit;",100,0,40);

  // Use the function to fit each bin to a gaussian 
  TGraphErrors* graph = new TGraphErrors();
  graph = FitBinsGausTH2D(clonedHist,sigmahist);
  

  TCanvas* canvas =  new TCanvas("canvas","2D histo with gaussian fits");
  graph ->SetTitle("Vertical Bin Means with Gaussian fit");
  graph ->GetXaxis()->SetTitle("x axis");
  graph ->GetYaxis()->SetTitle("mean");
  graph ->SetMarkerStyle(6);
  clonedHist->Draw("colz");
  graph ->Draw("P SAME");


}// end main



// FUNCTIONCS
Double_t gausFit(Double_t *x, Double_t *par)
{
  Double_t height = par[0];
  Double_t mean = par[1];
  Double_t sigma = par[2];

  Double_t fit = height * exp(-0.5 * pow((x[0] - mean)/sigma,2));
  return fit;
}


TGraphErrors* FitBinsGausTH2D(TH2D* hist, TH1D* sigmahist)
//// Fits each vertical bin in a TH2D to a gaussian and returns a TGraphErros with the means and the sigma as the vertical error bars. 
{
  // Fit each vertical bin to a gaussian and plot the means on top of the 2D histo. 
  // Define parameters
  const int nBinsX = hist ->GetNbinsX();
  const int nBinsY = hist ->GetNbinsY();
  const int nBins =  nBinsX;
  const double xmin = hist ->GetXaxis()->GetXmin();
  const double xmax = hist ->GetXaxis()->GetXmax();
  const double ymin = hist ->GetYaxis()->GetXmin();
  const double ymax = hist ->GetYaxis()->GetXmax();

  // cout<<endl;
  // cout<<"nBins: "<<nBins<<endl;
  // cout<<endl;

  // arrays to store fit results
  std::vector<double> binCenters(nBins);
  std::vector<double> means(nBins);
  std::vector<double> sigmas(nBins);
  std::vector<double> half_sigmas(nBins);
  std::vector<double> zeros(nBins);

  //TH1D* sigmahist =  new TH1D("sigmahist",";sigma from gaussian fit;",0,1);

  //loop through the bins
  for (int i = 0; i<nBins; i++) // 
    {
      // get 1d histo of y projection
      TH1D* binHist =  hist->ProjectionY("_py",i +1, i+1);
      // get bin center
      double binCenter = hist->GetXaxis()->GetBinCenter(i+1);
      // define fit and gaussian fcn
      TF1* gaussian =  new TF1("gaussian",gausFit,ymin,ymax,3); //
      //cout<<"ymin "<<ymin<<" ymax: "<<ymax <<endl;
      // give initial guesses and limits on parameters. 
      double mean_prediction = 0;
      gaussian ->SetParameters(1000,mean_prediction,5);
      gaussian->SetParLimits(1,mean_prediction - 30, mean_prediction +30);
      gaussian ->SetParLimits(2,0.01,40);

      binHist->Fit(gaussian, "Q");// "quiet" option
      // cout<<"bincenter: " <<binCenter<< " mean pred: "<<mean_prediction<<endl;
      //get fit results
      double mean = gaussian -> GetParameter(1);
      double sigma = gaussian ->GetParameter(2);
      //store results 
      binCenters[i] = binCenter;
      means[i] = mean;
      sigmas[i] = sigma;
      sigmahist->Fill(sigma);
      half_sigmas[i] = sigma*0.5;
      zeros[i] = 0;
      // cout<<"bin center: "<<binCenter<<endl;
      // cout<<"mean: "<<mean<<endl;
      // cout<<"sigma: "<<sigma<<endl;
      // cout<<endl;
      //// clean up
      delete gaussian;
    }// end loop over bins

  // convert vectors to arrays suitable for TGraphErrors 
  int nPoints = nBins;
  double* xValues =  &binCenters[0];
  double* yValues = &means[0];
  double* yErrors = &half_sigmas[0];
  double* xErrors = &zeros[0];
    
  // make TGraphErrors
  TGraphErrors* graph =  new TGraphErrors(nPoints, xValues, yValues, xErrors, yErrors);
  
  //TCanvas* canvas2 =  new TCanvas("canvas","2D histo with gaussian fits");
  //sigmahist->Draw();

  return graph;
}

