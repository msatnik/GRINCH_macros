#include <ctime>
#include <iostream>
#include <fstream>
#include <string>
#include <TChain.h>
#include <TSystem.h>
#include "TChain.h"
#include "TTree.h"
#include "TFile.h"
#include "TMatrixD.h"
#include "TVectorD.h"
#include "TObjString.h"
#include "TObjArray.h"
#include "TCut.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TMath.h"
#include "TLegend.h"
#include "TVector3.h"
#include "TGraphErrors.h"
#include "TLorentzVector.h"
#include <TStopwatch.h>

//global params
const Int_t maxTracks = 1000; // Reasonable limit on tracks to be stored per event



void make_hist_grinch_LED(Int_t runnum, Int_t entries_input = -1){
  gStyle->SetNumberContours(255); 
  TChain *C = new TChain("T");

  // these aren't all helpful for me at the moment but are a good template for reading in vars 
  Double_t GR_cut = 30; //GRINCH ToT sum cutoff 
  Double_t PS_cut = 0.2; //PS energy cutoff

  string configfilename = Form("RunLists/runlist_grinch_%d.cfg",runnum);

  cout<<"testing reading in from a config file"<<endl;

  ifstream configfile(configfilename);
  TString currentline;
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("endlist") ){
    if( !currentline.BeginsWith("#") ){
      if(!currentline) cout << "WARNING: No file exists at " << currentline << "." << endl;
      C->Add(currentline);
      cout << "Loaded file at: " << currentline << endl;
    }    
  }
  TCut globalcut = "";
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("endcut") ){
    if( !currentline.BeginsWith("#") ){
      globalcut += currentline;
    }    
    cout<< "Global Cut: "<<globalcut<<endl;
  }
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("#") ){
    TObjArray *tokens = currentline.Tokenize(" ");
    Int_t ntokens = tokens->GetEntries();
    if( ntokens>1 ){
      TString skey = ( (TObjString*)(*tokens)[0] )->GetString();
      if( skey == "GR_cut" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        GR_cut = sval.Atof();
	cout << "Loading Grinch ToT cut: " << GR_cut << endl;
      }
      if( skey == "PS_cut" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        PS_cut = sval.Atof();
	cout << "Loading Preshower e cut: " << PS_cut << endl;
      }
    }
    delete tokens;
  }

  cout<<endl<<"Populating list with global cut. May take a few minutes.... hold tight!"<<endl;
  TEventList *elist = new TEventList("elist","Elastic Event List");
  C->Draw(">>elist",globalcut);

  // cout << endl << "Event list populated with cut: "<<globalcut << endl;


  // Declare parameters
  // HCAL params
  Double_t HCAL_e;
  // BBCAL params 
  Double_t BBps_e, BBsh_e;
  // Track params 
  Double_t BBtr_x[maxTracks], BBtr_y[maxTracks],  BBtr_p[maxTracks], BBtr_th[maxTracks], BBtr_ph[maxTracks];
  Double_t BBtr_n;
  // Hodoscope
  Double_t HODOtmean[1000];
  // Physics
  Double_t kineW2;
  // GRINCH (only track matched I think)
  Double_t BBgr_allclus_tmean[1000], BBgr_allclus_adc[1000], BBgr_allclus_size[1000], BBgr_allclus_trms[1000], BBgr_allclus_tot_mean[1000], BBgr_allclus_trackindex[1000], BBgr_allclus_xmean[1000], BBgr_allclus_ymean[1000]; 
  Double_t BBgr_clus_tmean, BBgr_clus_adc, BBgr_clus_size, BBgr_clus_trms, BBgr_clus_tot_mean, BBgr_clus_trackindex, BBgr_clus_xmean, BBgr_clus_ymean; 
  Double_t BBgr_hit_amp[1000], BBgr_hit_clustindex[1000], BBgr_hit_col[1000], BBgr_hit_row[1000], BBgr_hit_pmtnum[1000], BBgr_hit_trackindex[1000], BBgr_hit_xhit[1000], BBgr_hit_yhit[1000], BBgr_hit_time[1000];
  Int_t hitsGR; 

  Int_t Nmultihits;
  Double_t BBgr_tdc_multihits_TDCelemID[10000],BBgr_tdc_multihits_le[10000],BBgr_tdc_multihits_te[10000],BBgr_tdc_multihits_tot[10000];
 
  Double_t BBgr_tdc_tdcelemID[1000], BBgr_tdc_tdc[1000], BBgr_tdc_te[1000],BBgr_tdc_mult[1000],BBgr_tdc_tot[1000];
  Int_t Ndata_BBgr_tdcelemID;

  Double_t bb_tdctrig_tdc[1000], bb_tdctrig_tdcelemID[1000];
  Int_t Nclusters; 
  Int_t Ndata_bb_tdctrig_tdcelemID;

  // Declare root tree variables and set values to memory locations in root file
  // Turn off all branches
  C->SetBranchStatus( "*", 0 );
  // Turn on specifc branches
  C->SetBranchStatus("Ndata.bb.grinch_tdc.allclus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.size",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.t_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.t_rms",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.tot_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.trackindex",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.x_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.y_mean",1);

  C->SetBranchStatus("bb.grinch_tdc.hit.amp",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.clustindex",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.col",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.row",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.pmtnum",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.time",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.trackindex",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.xhit",1);
  C->SetBranchStatus("bb.grinch_tdc.hit.yhit",1);
  C->SetBranchStatus("Ndata.bb.grinch_tdc.hit.pmtnum",1);

  // the hit closest to the good time cut
  C->SetBranchStatus("Ndata.bb.grinch_tdc.tdcelemID",1) ;
  C->SetBranchStatus("bb.grinch_tdc.tdcelemID",1) ; // The PMT number 
  C->SetBranchStatus("bb.grinch_tdc.tdc",1) ; // leading edge
  C->SetBranchStatus("bb.grinch_tdc.tdc_te",1) ; // trailing edge
  C->SetBranchStatus("bb.grinch_tdc.tdc_mult",1) ; //tdc multiplicity
  C->SetBranchStatus("bb.grinch_tdc.tdc_tot",1) ; // tdc time over threshold (te-le)

  // all of the hits in the mulit-hit tdc.
  C->SetBranchStatus("Ndata.bb.grinch_tdc.hits.TDCelemID",1) ;
  C->SetBranchStatus("bb.grinch_tdc.hits.TDCelemID",1) ; // The PMT number 
  C->SetBranchStatus("bb.grinch_tdc.hits.t",1) ; // leading edge
  C->SetBranchStatus("bb.grinch_tdc.hits.t_te",1) ; // trailing edge
  C->SetBranchStatus("bb.grinch_tdc.hits.t_tot",1) ; // tdc time over threshold (te-le)
 



  // Map branches to the variables 
  C->SetBranchAddress("Ndata.bb.grinch_tdc.allclus.adc",&Nclusters);
  C->SetBranchAddress("bb.grinch_tdc.allclus.adc",&BBgr_allclus_adc);
  C->SetBranchAddress("bb.grinch_tdc.allclus.size",&BBgr_allclus_size);
  C->SetBranchAddress("bb.grinch_tdc.allclus.t_mean",&BBgr_allclus_tmean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.t_rms",&BBgr_allclus_trms);
  C->SetBranchAddress("bb.grinch_tdc.allclus.tot_mean",&BBgr_allclus_tot_mean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.trackindex",&BBgr_allclus_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.allclus.x_mean",&BBgr_allclus_xmean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.y_mean",&BBgr_allclus_ymean);

  C->SetBranchAddress("bb.grinch_tdc.hit.amp",&BBgr_hit_amp);
  C->SetBranchAddress("bb.grinch_tdc.hit.clustindex",&BBgr_hit_clustindex);
  C->SetBranchAddress("bb.grinch_tdc.hit.col",&BBgr_hit_col);
  C->SetBranchAddress("bb.grinch_tdc.hit.row",&BBgr_hit_row);
  C->SetBranchAddress("bb.grinch_tdc.hit.pmtnum",&BBgr_hit_pmtnum);
  C->SetBranchAddress("bb.grinch_tdc.hit.time",&BBgr_hit_time);
  C->SetBranchAddress("bb.grinch_tdc.hit.trackindex",&BBgr_hit_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.hit.xhit",&BBgr_hit_xhit);
  C->SetBranchAddress("bb.grinch_tdc.hit.yhit",&BBgr_hit_yhit);
  C->SetBranchAddress("Ndata.bb.grinch_tdc.hit.pmtnum",&hitsGR);

  C->SetBranchAddress("Ndata.bb.grinch_tdc.tdcelemID",&Ndata_BBgr_tdcelemID) ;
  C->SetBranchAddress("bb.grinch_tdc.tdcelemID",&BBgr_tdc_tdcelemID) ; // The PMT number
  C->SetBranchAddress("bb.grinch_tdc.tdc",&BBgr_tdc_tdc) ; // leading edge
  C->SetBranchAddress("bb.grinch_tdc.tdc_te",&BBgr_tdc_te) ; // trailing edge
  C->SetBranchAddress("bb.grinch_tdc.tdc_mult",&BBgr_tdc_mult) ; //tdc multiplicity
  C->SetBranchAddress("bb.grinch_tdc.tdc_tot",&BBgr_tdc_tot) ; // tdc time over threshold (te-le)

  // all of the hits in the mulit-hit tdc.
  C->SetBranchAddress("Ndata.bb.grinch_tdc.hits.TDCelemID",&Nmultihits) ;
  C->SetBranchAddress("bb.grinch_tdc.hits.TDCelemID",&BBgr_tdc_multihits_TDCelemID) ; // The PMT number 
  C->SetBranchAddress("bb.grinch_tdc.hits.t",&BBgr_tdc_multihits_le) ; // leading edge
  C->SetBranchAddress("bb.grinch_tdc.hits.t_te",&BBgr_tdc_multihits_te) ; // trailing edge
  C->SetBranchAddress("bb.grinch_tdc.hits.t_tot",&BBgr_tdc_multihits_tot) ; // tdc time over threshold (te-le)
  


 // Declare outfile
  TFile *fout = new TFile( Form("output/grinch_LED_%d.root",runnum), "RECREATE" );
  // TFile *fout = new TFile("output/sbstest.root", "RECREATE" );

  // Histograms

  // physics 
  TH1D* h_W2 =  new TH1D("h_W2",";W2;" ,200, 0, 2);
  TH1D* h_W2_gr_anticut =  new TH1D("h_W2_gr_anticut",";W2 with anticut on grinch;",200,0,2);
  TH1D* h_W2_gr_ps_anticut= new TH1D("h_W2_gr_ps_anticut",";W2 with anticut on grinch and ps;",200,0,2);
  TH1D* h_W2_gr_ps_cut= new TH1D("h_W2_gr_ps_cut",";W2 with cut on grinch and ps;",200,0,2);
  TH1D* h_W2_ps_anticut= new TH1D("h_W2_ps_anticut",";W2 with anticut on ps;",200,0,2);
  TH1D* h_W2_ps_cut= new TH1D("h_W2_ps_cut",";W2 with cut on ps;",200,0,2);
  TH1D* h_W2_gr_cut =  new TH1D("h_W2_gr_cut",";W2 with cut on grinch;",200,0,2);
  TH1D* h_W2_elastic =  new TH1D("h_W2_elastic",";W2 with elastic cuts;",200,0,2);
  TH1D* h_W2_elastic_trcut =  new TH1D("h_W2_elastic_trcut",";W2 with elastic cuts and grinch track cut;",200,0,2);
  // BBCAL
  TH1D* h_BBps_e =  new TH1D("h_BBps_e",";BBps_e;" ,200, 0, 2);
  TH1D* h_HCAL_e = new TH1D("h_HCAL_e",";HCAL e;",200,0,3);
  TH1D* h_BBsh_e =  new TH1D("h_BBsh_e",";BBsh_e;" ,200, 0, 3);
  TH2D* h_BBsh_ps_e = new TH2D("h_BBsh_ps_e", "; sh_e  ; ps_e ", 100,0,3,100,0,3 );
  TH1D* h_BB_e_p =  new TH1D("h_BB_e_p",";total shower energy/ p;" ,200, 0, 2);
  TH1D* h_BBps_sh_e = new TH1D("h_BBps_sh_e",";sh_e + ps_e ;",200,0,6);
  TH1D* h_BBps_grcut = new TH1D("h_BBps_grcut",";preshower e (cut on clus tot sum) ; ",200,0,2);
  TH1D* h_BBps_granticut = new TH1D("h_BBps_granticut",";preshower e (anticut on clus tot sum) ; ",200,0,2);

 

  // GRINCH best cluster variables 
  TH1D* h_BBgr_clus_adc = new TH1D("h_BBgr_clus_adc", ";grinch clus ToT sum;",200,0,200);
  TH1D* h_BBgr_clus_size =  new TH1D("h_BBgr_clus_size", ";bb.grinch_tdc.clus.size;",20,0,20);
  TH1D* h_BBgr_clus_tmean =  new TH1D("h_BBgr_clus_tmean", ";bb.grinch_tdc.clus.t_mean - hodo_tmean;",60,-30,30);
  TH1D* h_BBgr_clus_tmean_nohodo =  new TH1D("h_BBgr_clus_tmean_nohodo", ";bb.grinch_tdc.clus.t_mean;",60,-30,30);
  TH1D* h_BBgr_clus_trms =  new TH1D("h_BBgr_clus_trms", ";bb.grinch_tdc.clus.t_rms;",50,0,5);
  TH1D* h_BBgr_clus_tot_mean =  new TH1D("h_BBgr_clus_tot_mean", ";bb.grinch_tdc.clus.tot_mean;",100,0,50);
  TH2D* h_BBgr_clus_tmean_tot =  new TH2D("h_BBgr_clus_tmean_tot",";clus tot; clus tmean ;",50,0,50,60,-30,30);
  TH2D* h_BBgr_clus_tot_mean_size =  new TH2D("h_BBgr_clus_tot_mean_size", ";cluster size;bb.grinch_tdc.clus.tot_mean; clus;",15,0,15,100,0,50);
  TH1D* h_BBgr_clus_trackindex =  new TH1D("h_BBgr_clus_trackindex", ";bb.grinch_tdc.clus.trackindex;",5,-1,4);
  TH1D* h_BBgr_elas_trackindex =  new TH1D("h_BBgr_elas_trackindex", ";track index w elastic cut;",5,-1,4);
  TH1D* h_BBgr_clus_xmean =  new TH1D("h_BBgr_clus_xmean", ";bb.grinch_tdc.clus.xmean;",200,-2,2);
  TH1D* h_BBgr_clus_ymean =  new TH1D("h_BBgr_clus_ymean", ";bb.grinch_tdc.clus.ymean;",100,-0.25,0.25);
  TH2D* h_BBgr_clus_xmean_projx = new TH2D("h_BBgr_clus_xmean_projx", "; projected x at grinch window from track ;cluster x position",200,-1,1,200,-1,1);
  TH2D* h_BBgr_clus_mirror2 = new TH2D("h_BBgr_clus_mirror2", "Mirror 2; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH2D* h_BBgr_clus_mirror1 = new TH2D("h_BBgr_clus_mirror1", "Mirror 1; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH2D* h_BBgr_clus_mirror3 = new TH2D("h_BBgr_clus_mirror3", "Mirror 3; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH2D* h_BBgr_clus_mirror4 = new TH2D("h_BBgr_clus_mirror4", "Mirror 4; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH1D* h_BBgr_projx = new TH1D("h_BBgr_clus_projx", "; projected x from track;", 100,-1,1);
  TH1D* h_BBgr_projy = new TH1D("h_BBgr_clus_projy", "; projected y from track;", 100,-0.25,0.25);

  // GRINCH all cluster variables 
  TH1D* h_BBgr_allclus_adc = new TH1D("h_BBgr_allclus_adc", ";bb.grinch_tdc.allclus.adc;",200,0,200);
  TH1D* h_BBgr_allclus_size =  new TH1D("h_BBgr_allclus_size", ";bb.grinch_tdc.allclus.size;",20,0,20);
  TH1D* h_BBgr_allclus_tmean =  new TH1D("h_BBgr_allclus_tmean", ";bb.grinch_tdc.allclus.t_mean;",60,-30,30);
  TH1D* h_BBgr_allclus_trms =  new TH1D("h_BBgr_allclus_trms", ";bb.grinch_tdc.allclus.t_rms;",50,0,5);
  TH1D* h_BBgr_allclus_tot_mean =  new TH1D("h_BBgr_allclus_tot_mean", ";bb.grinch_tdc.allclus.tot_mean;",50,0,5);

  TH1D* h_BBgr_allclus_trackindex =  new TH1D("h_BBgr_allclus_trackindex", ";bb.grinch_tdc.allclus.trackindex;",5,-1,4);
  TH1D* h_BBgr_allclus_xmean =  new TH1D("h_BBgr_allclus_xmean", ";bb.grinch_tdc.allclus.xmean;",200,-2,2);
  TH1D* h_BBgr_allclus_ymean =  new TH1D("h_BBgr_allclus_ymean", ";bb.grinch_tdc.allclus.ymean;",100,-0.25,0.25);
  TH1D* h_BBgr_allclus_Nclusters = new TH1D("h_BBgr_allclus_Nclusters", ";Number of clusters in event;", 20,0,20);
  TH2D* h_BBgr_allclus_xmean_projx = new TH2D("h_BBgr_allclus_xmean_projx", "; projected x at grinch window from track ;cluster x position",100,-1,1,100,-1,1);
  TH2D* h_BBgr_allclus_mirror2 = new TH2D("h_BBgr_allclus_mirror2", "Mirror 2; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH2D* h_BBgr_allclus_mirror1 = new TH2D("h_BBgr_allclus_mirror1", "Mirror 1; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH2D* h_BBgr_allclus_mirror3 = new TH2D("h_BBgr_allclus_mirror3", "Mirror 3; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH2D* h_BBgr_allclus_mirror4 = new TH2D("h_BBgr_allclus_mirror4", "Mirror 4; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
 
  TH2D* h_BBgr_clus_size_ps = new TH2D("h_BBgr_clus_size_ps",";preshower e ; cluster size", 200,0,3 ,15,0,15);
  TH2D* h_BBgr_clus_adc_ps = new TH2D("h_BBgr_clus_adc_ps","; preshower e ; cluster ToT sum", 200,0,3, 200,0,200);
  TH2D* h_BBgr_clus_size_adc =  new TH2D("h_BBgr_clus_size_adc",";clus ToT sum; clus size;",200,0,200,15,0,15);

  TH1D* h_BBgr_hit_time =  new TH1D("h_BBgr_hit_time", ";bb.grinch_tdc.hit.time;",100,-50,50);
  TH1D* h_BBgr_hit_numhits = new TH1D("h_BBgr_hit_numhits", ";bb.grinch_tdc.hit.time;",100,0,100);
  TH1D* h_BBgr_hit_amp =  new TH1D("h_BBgr_hit_amp", ";bb.grinch_tdc.hit.amp;",50,0,50);
 TH2D* h_BBgr_hit_time_amp =  new TH2D("h_BBgr_hit_time_amp","all PMTs with hits;hit branch tot; hit branch time ;",50,0,50,60,-30,30);
 TH2D* h_BBgr_hit_time_amp_250 =  new TH2D("h_BBgr_hit_time_amp_250","PMT 250;hit branch tot; hit branch time ;",50,0,50,60,-30,30);
 
 TH1D *h_BBgr_tdc_tdc =  new TH1D("h_BBgr_tdc_tdc", "bb.grinch_tdc.tdc",1800,-500,1300);
 TH1D *h_BBgr_tdc_tot =  new TH1D("h_BBgr_tdc_tot", "bb.grinch_tdc.tdc_tot",50,0,50);
 TH1D *h_BBgr_tdc_Ndata = new TH1D("h_BBgr_tdc_Ndata","Ndata.bb.grinch_tdc.tdcelemID",520,0,520);

TH1D *h_BBgr_tdc_multihits_le =  new TH1D("h_BBgr_tdc_multihits_le", "bb.grinch_tdc.hits.t",1800,-500,1300);
 TH1D *h_BBgr_tdc_multihits_tot =  new TH1D("h_BBgr_tdc_multihits_tot", "bb.grinch_tdc.hits.t_tot",50,0,50);

 TH2D  *h_BBgr_tdc_multihits_tdc_elemID = new TH2D("h_BBgr_tdc_multihits_tdc_elemID", "LE vs PMT for multi-hits tdc", 510,0,510, 1800,-500,1300 );

TH2D  *h_BBgr_tdc_multihits_tot_elemID = new TH2D("h_BBgr_tdc_multihits_tot_elemID", "ToT vs PMT for multi-hits tdc", 510,0,510, 50,0,50 );

 TH2D  *h_BBgr_tdc_multihits_tdc_tot = new TH2D("h_BBgr_tdc_multihits_tdc_tot", "ToT vs LE for multi-hits tdc", 50,0,50,200,1000,1200 );

TH1D *h_BBgr_tdc_Nmultihits = new TH1D("h_BBgr_tdc_Nmultihits","Ndata.bb.grinch_tdc.hits.t",1200,0,1200);

 
   // Set long int to keep track of total entries
  Long64_t Nevents = elist->GetN();
  UInt_t run_number = 0;

  cout<<endl << "Opened up TChain with nentries: " << C->GetEntries() << ". After globalcut: " << Nevents << "." << endl << endl;

  cout<<"Entries: "<<Nevents<<endl;
 
  Double_t projx;
  Double_t projy;

  Int_t max = 0;
    if (entries_input == -1){
      max = Nevents;
    }
    else{
      max = entries_input;
    }
    if (max > Nevents){ max = Nevents;}
    cout<<"max = "<<max<<endl;

  // Loop over events
    for(Long64_t nevent = 0; nevent<max; nevent++){
   
      C->GetEntry( elist->GetEntry( nevent ) ); 
      if (nevent%50000==0) cout << " Entry = " << nevent << endl;



      // General Histos 
     
      // GRINCH histos 

      // Loop over the individual PMTS
      h_BBgr_tdc_Ndata ->Fill(Ndata_BBgr_tdcelemID);
      for (Int_t i =0; i< Ndata_BBgr_tdcelemID ; i++)
	{
	  if (BBgr_tdc_tdcelemID[i] >=510 || BBgr_tdc_tot[i] ==0) continue;
	  h_BBgr_tdc_tdc ->Fill(BBgr_tdc_tdc[i]);
	  h_BBgr_tdc_tot ->Fill(BBgr_tdc_tot[i]);
	}
   
      //Loop over the multi-hits in the PMTs
      h_BBgr_tdc_Nmultihits ->Fill(Nmultihits);
      for (Int_t i =0; i< Nmultihits ; i++)
	{	 
	  if (BBgr_tdc_multihits_TDCelemID[i] >=510 || BBgr_tdc_multihits_tot[i] ==0) continue;
	  h_BBgr_tdc_multihits_le  ->Fill(BBgr_tdc_multihits_le[i]);
	  h_BBgr_tdc_multihits_tdc_elemID ->Fill(BBgr_tdc_multihits_TDCelemID[i],BBgr_tdc_multihits_le[i]);	 
	  h_BBgr_tdc_multihits_tot ->Fill(BBgr_tdc_multihits_tot[i]);
	  h_BBgr_tdc_multihits_tot_elemID ->Fill(BBgr_tdc_multihits_TDCelemID[i],BBgr_tdc_multihits_tot[i]);
	  h_BBgr_tdc_multihits_tdc_tot->Fill(BBgr_tdc_multihits_tot[i], BBgr_tdc_multihits_le[i]);	  
	}

      h_BBgr_allclus_Nclusters ->Fill(Nclusters);

      for (Int_t i = 0; i < Nclusters; i ++) //loop over multiple clusters
	{
	  h_BBgr_allclus_trackindex ->Fill(BBgr_allclus_trackindex[i]);  
	  h_BBgr_allclus_adc ->Fill(BBgr_allclus_adc[i]);
	  h_BBgr_allclus_size ->Fill(BBgr_allclus_size[i]);  
	  h_BBgr_allclus_tmean ->Fill(BBgr_allclus_tmean[i]);  
	  h_BBgr_allclus_trms ->Fill(BBgr_allclus_trms[i]);  
	  h_BBgr_allclus_tot_mean ->Fill(BBgr_allclus_tot_mean[i]);  
	  h_BBgr_allclus_ymean ->Fill(BBgr_allclus_ymean[i]);
	  h_BBgr_allclus_xmean ->Fill(BBgr_allclus_xmean[i]);
	  // h_BBgr_allclus_xmean_projx ->Fill(projx, BBgr_allclus_xmean[i]);
	}



      // loop over the grinch hit brances
      h_BBgr_hit_numhits ->Fill(hitsGR);
      for (Int_t i = 0; i < hitsGR; i++)
	{
	  if ( BBgr_hit_pmtnum[i] >=510) continue;
	  h_BBgr_hit_time ->Fill(BBgr_hit_time[i]);
	  h_BBgr_hit_amp ->Fill(BBgr_hit_amp[i]);
	  h_BBgr_hit_time_amp ->Fill(BBgr_hit_amp[i],BBgr_hit_time[i]);
	  /// h_BBgr_hit_time_pmtnum ->Fill(BBgr_hit_pmtnum[i], BBgr_hit_time[i]);
	  if (BBgr_hit_pmtnum[i] == 250)
	    {
	      h_BBgr_hit_time_amp_250 ->Fill(BBgr_hit_amp[i], BBgr_hit_time[i]);
	    }
	}

      
   
    
    }//end for loop over Nevents


    TCanvas *c1 = new TCanvas("c1","c1",800,600);
    h_BBgr_tdc_multihits_le->Draw();
    TCanvas *c2 =  new TCanvas("c2","c2",800,600);
    h_BBgr_tdc_multihits_tot_elemID ->Draw("colz");
    TCanvas *c3 =  new TCanvas("c3","c3",800,600);
   h_BBgr_tdc_multihits_tdc_elemID ->Draw("colz");

  cout<< "Looped over " << max<< " entries." <<endl;
  fout -> Write();
}
//end main
