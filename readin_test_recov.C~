#include <ctime>
#include <iostream>
#include <fstream>
#include <string>
#include <TChain.h>
#include <TSystem.h>
#include "TChain.h"
#include "TTree.h"
#include "TFile.h"
#include "TMatrixD.h"
#include "TVectorD.h"
#include "TObjString.h"
#include "TObjArray.h"
#include "TCut.h"
#include "TH1D.h"
#include "TH2D.h"
#include "TMath.h"
#include "TLegend.h"
#include "TVector3.h"
#include "TGraphErrors.h"
#include "TLorentzVector.h"
#include <TStopwatch.h>

//global params
const Int_t maxTracks = 1000; // Reasonable limit on tracks to be stored per event



void readin_test_recov(Int_t entries_input = -1){

  TChain *C = new TChain("T");

  Int_t kine = 8;
  Double_t tFitMin = 30; // Minimum number of entries per channel to calibrate ADC/TDC time
  Double_t t_trig = 510; // Mean tdc trig value (HCAL - BB) 
  Double_t E_e = 1.92; // Energy of beam (incoming electrons from accelerator)
  Double_t HCal_d = 14.5; // Distance to HCal from scattering chamber for comm1
  Double_t HCal_th = 35.0; // Angle that the center of HCal is at  
  Double_t W2_mean = 0.93; // Mean of W at current kinematic
  Double_t W2_sig = 0.039; // Width of W at current kinematic

  string configfilename = Form("config/sbs%d.cfg",kine);

  cout<<"testing reading in from a config file"<<endl;

  ifstream configfile(configfilename);
  TString currentline;
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("endlist") ){
    if( !currentline.BeginsWith("#") ){
      if(!currentline) cout << "WARNING: No file exists at " << currentline << "." << endl;
      C->Add(currentline);
      cout << "Loaded file at: " << currentline << endl;
    }    
  }
  TCut globalcut = "";
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("endcut") ){
    if( !currentline.BeginsWith("#") ){
      globalcut += currentline;
    }    
    cout<< "Global Cut: "<<globalcut<<endl;
  }
  while( currentline.ReadLine( configfile ) && !currentline.BeginsWith("#") ){
    TObjArray *tokens = currentline.Tokenize(" ");
    Int_t ntokens = tokens->GetEntries();
    if( ntokens>1 ){
      TString skey = ( (TObjString*)(*tokens)[0] )->GetString();
      if( skey == "tFitMin" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	tFitMin = sval.Atof();
	cout << "Loading timing fit min entries: " << tFitMin << endl;
      }
      if( skey == "t_trig" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	t_trig = sval.Atof();
	cout << "Loading mean timing difference BB/HCal trigger: " << t_trig << endl;
      }
      if( skey == "E_e" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	E_e = sval.Atof();
	cout << "Loading beam energy: " << E_e << endl;
      }
      if( skey == "HCal_d" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	HCal_d = sval.Atof();
	cout << "Loading HCal distance: " << HCal_d << endl;
      }
      if( skey == "HCal_th" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
	HCal_th = sval.Atof();	
	cout << "Loading HCal angle: " << HCal_th << endl;
      }
      if( skey == "W2_mean" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        W2_mean = sval.Atof();
	cout << "Loading W2 mean cut: " << W2_mean << endl;
      }
      if( skey == "W2_sig" ){
	TString sval = ( (TObjString*)(*tokens)[1] )->GetString();
        W2_sig = sval.Atof();
	cout << "Loading W2 sigma cut: " << W2_sig << endl;
      }
    }
    delete tokens;
  }

  cout<<endl<<"Populating list with global cut. May take a few minutes...."<<endl;
  TEventList *elist = new TEventList("elist","Elastic Event List");
  C->Draw(">>elist",globalcut);

  // cout << endl << "Event list populated with cut: "<<globalcut << endl;


  // Declare parameters
  // HCAL params
  Double_t HCALe;
  // BBCAL params 
  Double_t BBps_e, BBsh_e;
  // Track params 
  Double_t BBtr_x[maxTracks], BBtr_y[maxTracks],  BBtr_p[maxTracks], BBtr_th[maxTracks], BBtr_ph[maxTracks];
  Double_t BBtr_n;
  // Hodoscope
  Double_t HODOtmean[1000];
  // Physics
  Double_t kineW2;
  // GRINCH (only track matched I think)
  Double_t BBgr_allclus_tmean[1000], BBgr_allclus_adc[1000], BBgr_allclus_size[1000], BBgr_allclus_trms[1000], BBgr_allclus_tot_mean[1000], BBgr_allclus_trackindex[1000], BBgr_allclus_xmean[1000], BBgr_allclus_ymean[1000]; 
  Double_t BBgr_clus_tmean, BBgr_clus_adc, BBgr_clus_size, BBgr_clus_trms, BBgr_clus_tot_mean, BBgr_clus_trackindex, BBgr_clus_xmean, BBgr_clus_ymean; 
  Int_t Nclusters; 

  // Declare root tree variables and set values to memory locations in root file
  // Turn off all branches
  C->SetBranchStatus( "*", 0 );
  // Turn on specifc branches
  C->SetBranchStatus( "sbs.hcal.e", 1 );
  C->SetBranchStatus( "bb.tr.n", 1 );
  C->SetBranchStatus( "bb.tr.x", 1 );
  C->SetBranchStatus( "bb.tr.y", 1 );
  C->SetBranchStatus( "bb.tr.p", 1 );
  C->SetBranchStatus( "bb.tr.th", 1 );
  C->SetBranchStatus( "bb.tr.ph", 1 );
  C->SetBranchStatus( "bb.ps.e", 1 );
  C->SetBranchStatus( "bb.sh.e", 1 );
  C->SetBranchStatus( "bb.hodotdc.clus.tmean", 1 );
  C->SetBranchStatus( "e.kine.W2", 1 );
  C->SetBranchStatus("Ndata.bb.grinch_tdc.allclus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.size",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.t_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.t_rms",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.tot_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.trackindex",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.x_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.allclus.y_mean",1);

  C->SetBranchStatus("bb.grinch_tdc.clus.adc",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.size",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.t_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.t_rms",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.tot_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.trackindex",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.x_mean",1);
  C->SetBranchStatus("bb.grinch_tdc.clus.y_mean",1);

  // Map branches to the variables 
  C->SetBranchAddress( "sbs.hcal.e", &HCALe );
  C->SetBranchAddress( "bb.tr.n", &BBtr_n );
  C->SetBranchAddress( "bb.tr.x", &BBtr_x );
  C->SetBranchAddress( "bb.tr.y", &BBtr_y );
  C->SetBranchAddress( "bb.tr.p", &BBtr_p );
  C->SetBranchAddress( "bb.tr.th", &BBtr_th );
  C->SetBranchAddress( "bb.tr.ph", &BBtr_ph );
  C->SetBranchAddress( "bb.ps.e", &BBps_e );
  C->SetBranchAddress( "bb.sh.e", &BBsh_e );
  C->SetBranchAddress( "bb.hodotdc.clus.tmean", &HODOtmean );
  C->SetBranchAddress( "e.kine.W2", &kineW2 );

  C->SetBranchAddress("Ndata.bb.grinch_tdc.allclus.adc",&Nclusters);
  C->SetBranchAddress("bb.grinch_tdc.allclus.adc",&BBgr_allclus_adc);
  C->SetBranchAddress("bb.grinch_tdc.allclus.size",&BBgr_allclus_size);
  C->SetBranchAddress("bb.grinch_tdc.allclus.t_mean",&BBgr_allclus_tmean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.t_rms",&BBgr_allclus_trms);
  C->SetBranchAddress("bb.grinch_tdc.allclus.tot_mean",&BBgr_allclus_tot_mean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.trackindex",&BBgr_allclus_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.allclus.x_mean",&BBgr_allclus_xmean);
  C->SetBranchAddress("bb.grinch_tdc.allclus.y_mean",&BBgr_allclus_ymean);

  C->SetBranchAddress("bb.grinch_tdc.clus.adc",&BBgr_clus_adc);
  C->SetBranchAddress("bb.grinch_tdc.clus.size",&BBgr_clus_size);
  C->SetBranchAddress("bb.grinch_tdc.clus.t_mean",&BBgr_clus_tmean);
  C->SetBranchAddress("bb.grinch_tdc.clus.t_rms",&BBgr_clus_trms);
  C->SetBranchAddress("bb.grinch_tdc.clus.tot_mean",&BBgr_clus_tot_mean);
  C->SetBranchAddress("bb.grinch_tdc.clus.trackindex",&BBgr_clus_trackindex);
  C->SetBranchAddress("bb.grinch_tdc.clus.x_mean",&BBgr_clus_xmean);
  C->SetBranchAddress("bb.grinch_tdc.clus.y_mean",&BBgr_clus_ymean);
  
 // Declare outfile
  TFile *fout = new TFile( Form("output/sbs%d.root",kine), "RECREATE" );

  // Histograms

  // physics 
  TH1D* h_kine_W2 =  new TH1D("h_kine_W2",";W2;" ,200, 0, 6);
  // BBCAL
  TH1D* h_BBps_e =  new TH1D("h_BBps_e",";BBps_e;" ,200, 0, 3);
  TH2D* h_BBps_sh_e = new TH2D("h_BBps_sh_e", "; ps_e  ; sh_e ", 100,0,3,100,0,3 );

  // GRINCH best cluster variables 
  TH1D* h_BBgr_clus_adc = new TH1D("h_BBgr_clus_adc", ";bb.grinch_tdc.clus.adc;",200,0,200);
  TH1D* h_BBgr_clus_size =  new TH1D("h_BBgr_clus_size", ";bb.grinch_tdc.clus.size;",20,0,20);
  TH1D* h_BBgr_clus_tmean =  new TH1D("h_BBgr_clus_tmean", ";bb.grinch_tdc.clus.t_mean;",60,-30,30);
  TH1D* h_BBgr_clus_trms =  new TH1D("h_BBgr_clus_trms", ";bb.grinch_tdc.clus.t_rms;",50,0,5);
  TH1D* h_BBgr_clus_tot_mean =  new TH1D("h_BBgr_clus_tot_mean", ";bb.grinch_tdc.clus.tot_mean;",100,0,50);
  TH1D* h_BBgr_clus_trackindex =  new TH1D("h_BBgr_clus_trackindex", ";bb.grinch_tdc.clus.trackindex;",5,-1,4);
  TH1D* h_BBgr_clus_xmean =  new TH1D("h_BBgr_clus_xmean", ";bb.grinch_tdc.clus.xmean;",200,-2,2);
  TH1D* h_BBgr_clus_ymean =  new TH1D("h_BBgr_clus_ymean", ";bb.grinch_tdc.clus.ymean;",100,-0.25,0.25);
  TH2D* h_BBgr_clus_xmean_projx = new TH2D("h_BBgr_clus_xmean_projx", "; projected x at grinch window from track ;cluster x position",200,-1,1,200,-1,1);
  TH2D* h_BBgr_clus_mirror2 = new TH2D("h_BBgr_clus_mirror2", "Mirror 2; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);
  TH1D* h_BBgr_projx = new TH1D("h_BBgr_clus_projx", "; projected x from track;", 100,-1,1);
  TH1D* h_BBgr_projy = new TH1D("h_BBgr_clus_projy", "; projected y from track;", 100,-0.25,0.25);

  // GRINCH all cluster variables 
  TH1D* h_BBgr_allclus_adc = new TH1D("h_BBgr_allclus_adc", ";bb.grinch_tdc.allclus.adc;",200,0,200);
  TH1D* h_BBgr_allclus_size =  new TH1D("h_BBgr_allclus_size", ";bb.grinch_tdc.allclus.size;",20,0,20);
  TH1D* h_BBgr_allclus_tmean =  new TH1D("h_BBgr_allclus_tmean", ";bb.grinch_tdc.allclus.t_mean;",60,-30,30);
  TH1D* h_BBgr_allclus_trms =  new TH1D("h_BBgr_allclus_trms", ";bb.grinch_tdc.allclus.t_rms;",50,0,5);
  TH1D* h_BBgr_allclus_tot_mean =  new TH1D("h_BBgr_allclus_tot_mean", ";bb.grinch_tdc.allclus.tot_mean;",50,0,5);
  TH1D* h_BBgr_allclus_trackindex =  new TH1D("h_BBgr_allclus_trackindex", ";bb.grinch_tdc.allclus.trackindex;",5,-1,4);
  TH1D* h_BBgr_allclus_xmean =  new TH1D("h_BBgr_allclus_xmean", ";bb.grinch_tdc.allclus.xmean;",200,-2,2);
  TH1D* h_BBgr_allclus_ymean =  new TH1D("h_BBgr_allclus_ymean", ";bb.grinch_tdc.allclus.ymean;",100,-0.25,0.25);
  TH1D* h_BBgr_allclus_Nclusters = new TH1D("h_BBgr_allclus_Nclusters", ";Number of clusters in event;", 20,0,20);
  TH2D* h_BBgr_allclus_xmean_projx = new TH2D("h_BBgr_allclus_xmean_projx", "; projected x at grinch window from track ;cluster x position",200,-1,1,200,-1,1);
  TH2D* h_BBgr_allclus_mirror2 = new TH2D("h_BBgr_allclus_mirror2", "Mirror 2; projected y at grinch window from track ;cluster y position",100,-0.25,0.25,100,-0.25,0.25);

 

   // Set long int to keep track of total entries
  Long64_t Nevents = elist->GetN();
  UInt_t run_number = 0;

  cout<<endl << "Opened up TChain with nentries: " << C->GetEntries() << ". After globalcut: " << Nevents << "." << endl << endl;

  cout<<"Entries: "<<Nevents<<endl;
 
  Double_t projx;
  Double_t projy;

  Int_t max = 0;
    if (entries_input == -1){
      max = Nevents;
    }
    else{
      max = entries_input;
    }
    if (max > Nevents){ max = Nevents;}
    cout<<"max = "<<max<<endl;

  // Loop over events
    for(Long64_t nevent = 0; nevent<max; nevent++){
   
      C->GetEntry( elist->GetEntry( nevent ) ); 
      if (nevent%50000==0) cout << " Entry = " << nevent << endl;

      // General Histos 
      h_kine_W2 ->Fill(kineW2);
      h_BBps_e ->Fill(BBps_e);
      h_BBps_sh_e ->Fill(BBps_e,BBsh_e); 
      //h_BBps_sh_e ->Fill(BBps_e,BBsh_e); //why is this 2d printing in the terminal but not the projx xmean one lol

      // GRINCH histos 
   
      h_BBgr_clus_trackindex ->Fill(BBgr_clus_trackindex);  
      h_BBgr_allclus_Nclusters ->Fill(Nclusters);
      h_BBgr_clus_adc ->Fill(BBgr_clus_adc);
      h_BBgr_clus_size ->Fill(BBgr_clus_size);  
      h_BBgr_clus_tmean ->Fill(BBgr_clus_tmean - HODOtmean[0]);  
      h_BBgr_clus_trms ->Fill(BBgr_clus_trms);  
      h_BBgr_clus_tot_mean ->Fill(BBgr_clus_tot_mean);  
      h_BBgr_clus_ymean ->Fill(BBgr_clus_ymean);
      h_BBgr_clus_xmean ->Fill(BBgr_clus_xmean);

      projx = BBtr_x[0] +BBtr_th[0]*0.48;
      projy = BBtr_y[0]+BBtr_ph[0]*0.48;
      h_BBgr_projx ->Fill(projx);
      h_BBgr_projy ->Fill(projy);
      h_BBgr_clus_xmean_projx ->Fill(projx, BBgr_clus_xmean);

      if (projx > -0.4 && projx < -0.1)
	{
	  h_BBgr_clus_mirror2 ->Fill(projy, BBgr_clus_ymean);
	}

      for (Int_t i = 0; i < Nclusters; i ++)
	{
	  h_BBgr_allclus_trackindex ->Fill(BBgr_allclus_trackindex[i]);  
	  h_BBgr_allclus_adc ->Fill(BBgr_allclus_adc[i]);
	  h_BBgr_allclus_size ->Fill(BBgr_allclus_size[i]);  
	  h_BBgr_allclus_tmean ->Fill(BBgr_allclus_tmean[i] - HODOtmean[0]);  
	  h_BBgr_allclus_trms ->Fill(BBgr_allclus_trms[i]);  
	  h_BBgr_allclus_tot_mean ->Fill(BBgr_allclus_tot_mean[i]);  
	  h_BBgr_allclus_ymean ->Fill(BBgr_allclus_ymean[i]);
	  h_BBgr_allclus_xmean ->Fill(BBgr_allclus_xmean[i]);
	  h_BBgr_allclus_xmean_projx ->Fill(projx, BBgr_allclus_xmean[i]);
	}

      
   
    
    }//end for loop over Nevents
  
  cout<< "Looped over " << max<< " entries." <<endl;
  fout -> Write();
}
//end main
